; delegation_layer.clsp
; for DataLayer.storage by yakuhito

;; Allows the owner of a store to delegate a fixed set of capabilities to
;; other puzzle hashes.
;; This layer will re-create itself when a delegated puzzle is running to 
;; prevent take-over attacks.
;; Capabilities are further restricted via filters.

(mod (
    MOD_HASH
    INNER_PUZZLE_HASH
    MERKLE_ROOT
    merkle_proof ; () if running inner puzzle
    puzzle_reveal
    puzzle_solution
  )

  (include condition_codes.clib)
  (include merkle_utils.clib)
  (include sha256tree.clib)
  (include curry.clib)

  (defconstant NEW_MERKLE_ROOT_CONDITION -13)

  ; only one odd CREATE_COIN enforced in upper layers
  (defun morph_conditions (MOD_HASH INNER_PUZZLE_HASH conditions new_merkle_root_info)
    (if conditions
      (if (= (f (f conditions)) NEW_MERKLE_ROOT_CONDITION)
        (morph_conditions
          MOD_HASH INNER_PUZZLE_HASH
          (r conditions)
          (r (f conditions))
        )
        ; else
        (c
          (f conditions)
          (morph_conditions
            MOD_HASH INNER_PUZZLE_HASH
            (r conditions)
            new_merkle_root_info
          )
        )
      )
      ; else
      (list
        (list
          CREATE_COIN
          (curry_hashes_inline MOD_HASH
            (sha256 1 MOD_HASH)
            (sha256 1 INNER_PUZZLE_HASH)
            (sha256 1 (f new_merkle_root_info))
          )
          1
          (r new_merkle_root_info)
        )
      )
    )
  )

 (defun main (MOD_HASH INNER_PUZZLE_HASH MERKLE_ROOT merkle_proof conditions puzzle_hash)
    (if (= puzzle_hash INNER_PUZZLE_HASH)
      conditions
      ; else
      (if (= MERKLE_ROOT (simplify_merkle_proof puzzle_hash merkle_proof))
        (morph_conditions
          MOD_HASH
          INNER_PUZZLE_HASH
          conditions
          (list MERKLE_ROOT) 
        )
        ; else
        (x)
      )
    )
  )

 (main MOD_HASH INNER_PUZZLE_HASH MERKLE_ROOT merkle_proof (a puzzle_reveal puzzle_solution) (sha256tree puzzle_reveal)) 
)
