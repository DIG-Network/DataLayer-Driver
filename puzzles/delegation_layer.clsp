; delegation_layer.clsp
; for DataLayer.storage by yakuhito

;; Allows the owner of a store to delegate a fixed set of capabilities to
;; other puzzle hashes.
;; This layer will re-create itself when a delegated puzzle is running to 
;; prevent take-over attacks.
;; Capabilities are further restricted via filters.

(mod (
    MOD_HASH
    INNER_PUZZLE_HASH
    MERKLE_ROOT
    merkle_proof ; () if running inner puzzle
    puzzle_reveal
    puzzle_solution
  )

  (include condition_codes.clib)
  (include merkle_utils.clib)
  (include sha256tree.clib)
  (include curry.clib)

  (defconstant NEW_MERKLE_ROOT_CONDITION -13)

  ; only one odd CREATE_COIN enforced in upper layers
  (defun morph_conditions (MOD_HASH INNER_PUZZLE_HASH conditions new_merkle_root_info add_odd_create_coin)
    (if conditions
      ; todo: I don't understand why my initial code also checked (= (strlen (f (r (f conditions)))) 32)
      ;; will have to come back, but, for now, removing that
      (if (= (f (f conditions)) NEW_MERKLE_ROOT_CONDITION)
        (morph_conditions
          MOD_HASH INNER_PUZZLE_HASH
          (r conditions)
          (r (f conditions))
          odd_create_coin_found
        )
        ; else
        (c
          (f conditions)
          (morph_conditions
            MOD_HASH INNER_PUZZLE_HASH
            (r conditions)
            new_merkle_root_info
            add_odd_create_coin
          )
        )
      )
      ; else
      (if add_odd_create_coin
        (list
          (list
            CREATE_COIN
            (curry_hashes_inline MOD_HASH
              (sha256 1 MOD_HASH)
              (sha256 1 INNER_PUZZLE_HASH)
              (sha256 1 (f new_merkle_root_info))
            )
            1
            (r new_merkle_root_info)
          )
        )
        ; else
        ()
      )
    )
  )

  ; raise if not ok
  ; return 1 (i.e., add odd create coin) if a delegated puzzle is running
  (defun verify_puzzle_hash (puzzle_hash INNER_PUZZLE_HASH MERKLE_ROOT merkle_proof)
    (if (= puzzle_hash INNER_PUZZLE_HASH)
      ()
      ; else
      (if (= MERKLE_ROOT (simplify_merkle_proof puzzle_hash merkle_proof)) 1 (x)) 
    )
  )

  (morph_conditions
    MOD_HASH
    INNER_PUZZLE_HASH
    (a puzzle_reveal puzzle_solution)
    (list MERKLE_ROOT)
    (verify_puzzle_hash (sha256tree puzzle_reveal) INNER_PUZZLE_HASH MERKLE_ROOT merkle_proof) ; 0 or 1
  )
)
