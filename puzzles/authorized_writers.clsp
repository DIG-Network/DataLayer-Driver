; authorized_writers.clsp
; for DataLayer.storage by yakuhito

;; Allows the data store owner to set a list of authorized writers that:
;;  - CAN update the store root hash, label, description, and any other metadata
;;  - CAN update oracle address and fee, if the store has an oracle layer
;;  - CANNOT uptade the authorized writers list
;;  - CANNOT emit NEW_OWNER_CONDITION for the ownership layer
;;  - CANNOT use the metadata updater to emit 'illegal' conditions
;;
;; Note: This layer can be added/exited any time by the owner. It's up to the inner
;;       puzzle to wrap CREATE_COIN puzzle hashes with this layer.
;;
;; Warning: This layer assumes the metadata updater puzzle used is that of the
;;          default metadata updater; do not use this layer if you are using another
;;          metadata updater puzzle.

(mod (
  ; first curry
  INNER_PUZZLE_HASH
  AUTHORIZED_WRITERS_HASH
  ; second curry
  SELF_HASH
  authorized_writers_list_reveal ; () if running inner puzzle
  puzzle_reveal ; reveal of either inner puzzle or authorized writer puzzle
  solution ; solution for authorized writer puzzle or inner puzzle
)
  (include condition_codes.clib)
  (include sha256tree.clib)

  (defun item_in_list (item the_list)
    (if the_list
      (if (= item (f the_list))
        1
        ; else
        (item_in_list item (r the_list))
      )
      ; else - list is empty
      ()
    )
  )

  ;; we know that another CREATE_COIN [odd_amount] or CREATE -113 will make the ownership layer error out
  (defun validate_conditions (conditions)
    (if conditions
      (if (any ; todo: negative tests for these
          (= (f (f conditions)) -10) ; -10 is NEW_OWNER_CONDITION for ownership layer
          (all
            (= (f (f conditions)) -24) ; -24 triggers metadata updater
            (not (= (f (r (r (f (r ( r (f conditions))))))) ())) ; check authorized writer isn't using metadata updater to emit 'illegal' conditions
          )
        )
        ()
        ; else
        (validate_and_return_conditions (r conditions))
      )
      ; else - all conditions checked
      1
    )
  )

  (defun validate_and_return_conditions (conditions)
    (if (validate_conditions conditions)
      conditions
      ; else
      (x "nice try - authorized puzzle contained invalid output conditions")
    )
  )

  ; main
  (if authorized_writers_list_reveal
    ; authorized writer spend
    (if (all
        (= (sha256tree authorized_writers_list_reveal) AUTHORIZED_WRITERS_HASH)
        (item_in_list (sha256tree puzzle_reveal) authorized_writers_list_reveal)
      )
      (c
        (list CREATE_COIN SELF_HASH 1) ; todo: this is not gud
        (validate_and_return_conditions (a puzzle_reveal solution))
      )
      ; else
      (x "ph not authorized")
    )
    ; else - owner spend
    (if (= (sha256tree puzzle_reveal) INNER_PUZZLE_HASH)
      (a puzzle_reveal solution)
      ; else
      (x "inner puzzle doesn't match inner puzzle hash")
    )
  )
)
