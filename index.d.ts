/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Coin {
  parentCoinInfo: Buffer
  puzzleHash: Buffer
  amount: bigint
}
export interface CoinSpend {
  coin: Coin
  puzzleReveal: Buffer
  solution: Buffer
}
export interface SpendBundle {
  coinSpends: Array<CoinSpend>
  aggregatedSignature: Buffer
}
export interface LineageProof {
  parentParentCoinId: Buffer
  parentInnerPuzzleHash: Buffer
  parentAmount: bigint
}
export interface EveProof {
  parentCoinInfo: Buffer
  amount: bigint
}
export interface Proof {
  lineageProof?: LineageProof
  eveProof?: EveProof
}
export declare function newLineageProof(lineageProof: LineageProof): Proof
export declare function newEveProof(eveProof: EveProof): Proof
export interface DataStoreMetadata {
  rootHash: Buffer
  label: string
  description: string
}
export interface DelegatedPuzzleInfo {
  adminInnerPuzzleHash?: Buffer
  writerInnerPuzzleHash?: Buffer
  oraclePaymentPuzzleHash?: Buffer
  oracleFee?: bigint
}
export interface DelegatedPuzzle {
  puzzleHash: Buffer
  puzzleInfo: DelegatedPuzzleInfo
}
export interface DataStoreInfo {
  coin: Coin
  launcherId: Buffer
  proof: Proof
  metadata: DataStoreMetadata
  ownerPuzzleHash: Buffer
  delegatedPuzzles: Array<DelegatedPuzzle>
}
export interface SuccessResponse {
  coinSpends: Array<CoinSpend>
  newInfo: DataStoreInfo
}
export interface SyncStoreResponse {
  latestInfo: DataStoreInfo
  latestHeight: number
}
export declare function masterPublicKeyToWalletSyntheticKey(publicKey: Buffer): Buffer
export declare function masterPublicKeyToFirstPuzzleHash(publicKey: Buffer): Buffer
export declare function masterSecretKeyToWalletSyntheticSecretKey(secretKey: Buffer): Buffer
export declare function secretKeyToPublicKey(secretKey: Buffer): Buffer
export declare function puzzleHashToAddress(puzzleHash: Buffer, prefix: string): string
export declare function addressToPuzzleHash(address: string): Buffer
export declare function adminDelegatedPuzzleFromKey(syntheticKey: Buffer): DelegatedPuzzle
export declare function writerDelegatedPuzzleFromKey(syntheticKey: Buffer): DelegatedPuzzle
export declare function oracleDelegatedPuzzle(oraclePuzzleHash: Buffer, oracleFee: bigint): DelegatedPuzzle
export declare function signCoinSpends(coinSpends: Array<CoinSpend>, privateKeys: Array<Buffer>, aggSigData: Buffer): Buffer
export declare function getCoinId(coin: Coin): Buffer
export declare function updateStoreMetadata(storeInfo: DataStoreInfo, newRootHash: Buffer, newLabel: string, newDescription: string, ownerPublicKey?: Buffer | undefined | null, adminPublicKey?: Buffer | undefined | null, writerPublicKey?: Buffer | undefined | null): SuccessResponse
export declare function updateStoreOwnership(storeInfo: DataStoreInfo, newOwnerPuzzleHash: Buffer, newDelegatedPuzzles: Array<DelegatedPuzzle>, ownerPublicKey?: Buffer | undefined | null, adminPublicKey?: Buffer | undefined | null): SuccessResponse
export declare function meltStore(storeInfo: DataStoreInfo, ownerPublicKey: Buffer): Array<CoinSpend>
export declare class Tls {
  constructor(certPath: string, keyPath: string)
}
export declare class Peer {
  static new(nodeUri: string, networkId: string, tls: Tls): Promise<Peer>
  getCoins(puzzleHash: Buffer, minHeight: number): Promise<Array<Coin>>
  mintStore(minterSyntheticKey: Buffer, minterPhMinHeight: number, rootHash: Buffer, label: string, description: string, ownerPuzzleHash: Buffer, delegatedPuzzles: Array<DelegatedPuzzle>, fee: bigint): Promise<SuccessResponse>
  syncStore(storeInfo: DataStoreInfo, minHeight: number): Promise<SyncStoreResponse>
  broadcastSpendBundle(spendBundle: SpendBundle): Promise<string>
  isCoinSpent(coinId: Buffer): Promise<boolean>
  oracleSpend(spenderSyntheticKey: Buffer, spenderPhMinHeight: number, storeInfo: DataStoreInfo, fee: bigint): Promise<SuccessResponse>
  addFee(spenderSyntheticKey: Buffer, spenderPhMinHeight: number, coinIds: Array<Buffer>, fee: bigint): Promise<Array<CoinSpend>>
}
